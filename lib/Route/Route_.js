// Generated by LiveScript 1.3.1
(function(){
  var each, _, Nodulator, Request, Route, _set, MultiRoute, slice$ = [].slice, this$ = this;
  each = require('prelude-ls').each;
  _ = require('underscore');
  Nodulator = null;
  Request = require('./Request');
  Route = (function(){
    Route.displayName = 'Route';
    var prototype = Route.prototype, constructor = Route;
    prototype.basePath = '/api/';
    prototype.apiVersion = 1;
    prototype.rname = '';
    function Route(resource, config){
      this.resource = resource;
      this.config = config;
      if (Nodulator == null) {
        Nodulator = require('../..');
      }
      if (typeof this.resource === 'function') {
        this.rname = this.resource.lname;
      } else if (typeof this.resource === 'string') {
        this.rname = this.resource;
        this.resource = undefined;
        if (Nodulator.config == null) {
          Nodulator.Config();
        }
      } else {
        throw new Error('Route constructor needs a Resource or a Name as first parameter');
      }
      this.name = this.rname + 's';
      if (this.rname[this.rname.length - 1] === 'y') {
        this.name = slice$.call(this.rname, 0, this.name.length) + 'ies';
      }
      this.app = Nodulator.app;
      console.log('Route');
    }
    prototype._WrapRequest = function(fName, args){
      var Req, ret;
      console.log("New Request " + fName);
      Req = new Request(args);
      ret = this[fName](Req);
      switch (true) {
      case ret.then != null:
        ret.fail(function(){
          return Req.SendError(err);
        });
        return ret.then(function(it){
          return Req.Send(it);
        });
      default:
        return Req.Send(ret);
      }
    };
    prototype._Add = function(type, url){
      var i$, middle, done, this$ = this;
      middle = 2 < (i$ = arguments.length - 1) ? slice$.call(arguments, 2, i$) : (i$ = 2, []), done = arguments[i$];
      console.log('Ba alors ?', type, url, middle, done);
      if (done == null) {
        done = url;
        url = '/';
      }
      if (!middle.length && typeof url === 'function') {
        middle.push(url);
        url = '/';
      }
      if (this[type + url] == null) {
        this[type + url] = done;
        if (middle.length) {
          middle.push(function(){
            var args;
            args = slice$.call(arguments);
            console.log('mais ta mere');
            return this$._WrapRequest(type + url, args);
          });
          return this.app.route(this.basePath + this.apiVersion + '/' + this.name + url)[type].apply(this.app.route(this.basePath + this.apiVersion + '/' + this.name + url), middle);
        } else {
          this.app.route(this.basePath + this.apiVersion + '/' + this.name + url)[type](function(){
            return console.log('mais ta soeur');
          });
          return this._WrapRequest(type + url, args);
        }
      } else {
        return this[type + url] = done;
      }
    };
    return Route;
  }());
  _set = function(verb){
    console.log('Yeah', verb);
    return Route.prototype[verb] = function(){
      var args;
      args = slice$.call(arguments);
      console.log('re-Yeah', verb);
      args.unshift(verb[0].toLowerCase() + slice$.call(verb, 1, verb.length).join(''));
      return this._Add.apply(this, args);
    };
  };
  each(_set, ['Post', 'All', 'Get', 'Put', 'Delete']);
  MultiRoute = (function(superclass){
    var prototype = extend$((import$(MultiRoute, superclass).displayName = 'MultiRoute', MultiRoute), superclass).prototype, constructor = MultiRoute;
    function MultiRoute(){
      var this$ = this;
      MultiRoute.superclass.apply(this, arguments);
      console.log('MAIS LOL YA QQN ????');
      this.All('/:id*', function(it){
        console.log('All');
        return it.SetInstance(this$.resource.Fetch(+it.params.id));
      });
      this.Get(function(it){
        console.log('Get');
        return this$.resource.List(it.query);
      });
      this.Post(function(it){
        console.log('post');
        return this$.resource.Create(it.body);
      });
      this.Get('/:id', function(it){
        console.log('Get2');
        return it.instance;
      });
      this.Put('/:id', function(it){
        console.log('Put');
        return it.instance.ExtendSafe(it.body) && it.instance.Save();
      });
      this.Delete('/:id', function(it){
        console.log('Delete');
        return it.instance.Delete();
      });
    }
    return MultiRoute;
  }(Route));
  module.exports = Route;
  Route.SingleRoute = require('./SingleRoute');
  Route.MultiRoute = MultiRoute;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
