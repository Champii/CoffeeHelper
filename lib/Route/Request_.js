// Generated by LiveScript 1.3.1
(function(){
  var isType, errors, Request;
  isType = require('prelude-ls').isType;
  errors = {
    not_found: 404,
    'Error on Delete': 500
  };
  Request = (function(){
    Request.displayName = 'Request';
    var prototype = Request.prototype, constructor = Request;
    prototype.instance = null;
    prototype.sent = false;
    function Request(args){
      this.req = args[0], this.res = args[1], this.next = args[2];
      this._Parse();
    }
    prototype.Send = function(it){
      if (this.sent) {
        return;
      }
      console.log(isType('Array', it));
      if (isType('Array', it)) {
        console.log('array', it);
        it = map(function(it){
          if (it.ToJSON != null) {
            return it.ToJSON();
          } else {
            return it;
          }
        }, it);
        console.log('array ernd', it);
      }
      console.log('Send', it);
      if (it.ToJSON != null) {
        this.res.status(200).send(it.ToJSON());
      } else {
        this.res.status(200).send(it);
      }
      this.sent = true;
    };
    prototype.SendError = function(it){
      if (this.sent) {
        return;
      }
      this.res.status(errors[it.status]).send(it);
      return this.send = true;
    };
    prototype.SetInstance = function(it){
      var this$ = this;
      switch (true) {
      case it.then != null:
        it.fail(function(it){
          return this$.SendError(it);
        });
        return it.then(function(it){
          this$.req._instance = it;
          return this$.next();
        });
      default:
        this.req._instance = it;
        return this.next();
      }
    };
    prototype._Parse = function(){
      import$(this, this.req);
      if (this._instance != null) {
        return this.instance = this._instance;
      }
    };
    return Request;
  }());
  Request.errors = errors;
  module.exports = Request;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
