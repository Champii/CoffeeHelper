#!/usr/bin/env coffee

#
# Nodulator Boostrap
#
# Usage: Nodulator (init) | ((install | remove) moduleName)
#

_ = require 'underscore'
fs = require 'fs'
path = require 'path'
exec = require('child_process').exec
async = require 'async'

args = process.argv[2..]

NodulatorRoot = path.resolve __dirname, '..'
appRoot = path.resolve '.'

moduleOrder = ['nodulator-socket', 'nodulator-assets', 'nodulator-angular', 'nodulator-account']

dependencies =
  'nodulator-angular': ['nodulator-socket', 'nodulator-assets']

capitalize = (str) ->
  str[0].toUpperCase() + str[1..]

exists = (path, done) ->
  fs.open path, 'r', (err, fd) ->
    if err?
      done false
    else
      fs.closeSync fd
      done true

npmStandard = (action, pack, done) ->
  exec 'npm ' + action + ' ' + pack + ' --save', (err, stdout, stderr) ->
    return done err if err? and done?
    return console.error err if err?

    done() if done?

npmDevInstall = (action, pack, done) ->
  if pack.split('-').length is 2
    packCapit = capitalize(pack.split('-')[0]) + '-' + capitalize(pack.split('-')[1])
  else
    packCapit = capitalize pack

  orig = path.resolve(NodulatorRoot, '..') + '/' + packCapit

  exec 'mkdir -p ./node_modules', (err, stdout, stderr) ->
    return done err if err? and done?

    exec 'cd ' + appRoot + '/node_modules && ln -s ' + orig + ' ' + pack + '&& cd ..', (err, stdout, stderr) ->
      return done err if err? and done?
      return console.error err if err?

      done() if done?

usage = ->
  console.error 'Usage: Nodulator (init) | ((install |  install-dev | remove) moduleName1 [, moduleName2])'

generateMain = (modules) ->

  mainBefore = 'Nodulator = require \'nodulator\'\n'
  mainBefore += 'Server = require \'./server\'\n'

  mainAfter = ''
  mainAfter += '\n\n' if modules.length
  for module in (_(modules).sortBy (item) -> _(moduleOrder).indexOf item)
    name = module.split('-')[1]
    mainBefore += '\n' + capitalize(name) + ' = require \'' + module + '\''
    mainAfter += 'Nodulator.Use ' + capitalize(name) + '\n'

  mainAfter += '\nServer.Init()\n'
  mainAfter += 'Nodulator.Run()\n' if 'nodulator-assets' in modules

  fs.writeFileSync appRoot + '/main.coffee', mainBefore + mainAfter

if args.length < 1 or args[0] not in ['init', 'install', 'remove', 'install-dev']
  return usage()


if args[0] is 'init'
  async.series [
    (done) ->
      exists './node_modules/nodulator', (exist) ->
        if not exist
          process.stdout.write 'Installing Nodulator..............'
          npmStandard 'install', 'nodulator', (err) ->
            return done err if err?

            process.stdout.write 'Ok\n'
            done()

        else
          done()

    (done) ->
      process.stdout.write 'Installing base folder tree.......'
      exec 'mkdir -p node_modules', (err, stdout, stderr) ->
        exec 'cp -ran ' + (path.resolve NodulatorRoot, 'bin/baseFiles/') + '/* ' + appRoot, done

    (done) ->
      process.stdout.write 'Ok\n'
      process.stdout.write 'Processing submodules.............'
      fs.readdir 'node_modules', (err, files) ->
        return done err if err?

        nodulatorFiles = _(files).filter (name) -> name.split('-').length > 1 and name.split('-')[0] is 'nodulator'
        toWrite = if not nodulatorFiles.length then 'None\n' else nodulatorFiles.length
        process.stdout.write toWrite + '\n'

        generateMain nodulatorFiles

        i = 1
        async.eachSeries (_(nodulatorFiles).sortBy (item) -> _(moduleOrder).indexOf item), (file, done) ->
          binName = 'Nodulator-' + file.split('-')[1][0].toUpperCase() + file.split('-')[1][1..] + '.coffee'
          binPath = appRoot + '/node_modules/' + file + '/bin/' + binName
          exists binPath, (exist) ->
            return done() if not exist

            process.stdout.write '\n[' + i++ + ']Processing ' + binName.split('.')[0] + ': \n'
            (require binPath)(done)
        , done

  ], (err, results) ->
    return console.error err if err?

else if args[0] in ['install', 'remove', 'install-dev']

  npm = npmStandard
  if args[0] is 'install-dev'
    npm = npmDevInstall

  exists 'node_modules/nodulator', (exist) ->
    if not exist
      console.log 'Installing nodulator'
      npm(args[0], 'nodulator')
    else
      console.log 'Already installed: nodulator'

    for packageName in args[1..]

      async.series [

        (done) ->
          #install dependencies
          if dependencies['nodulator-' + packageName]? and args[0] in ['install', 'install-dev']
            async.eachSeries dependencies['nodulator-' + packageName], (item, done) ->
              exists 'node_modules/' + item, (exist) ->
                if not exist
                  console.log 'Installing ' + item
                  npm 'install', item, done
                else
                  console.log 'Already installed: ' + item
                  done()
            , done
          else
            done()

        (done) ->
          toInstall = 'nodulator-' + packageName
          if packageName? and toInstall in moduleOrder
            exists 'node_modules/' + toInstall, (exist) ->
              if exist
                console.log 'Already installed: ' + toInstall
                return done()

              console.log 'Installing ' + toInstall
              npm args[0], toInstall, done

          else if args[1]?
            console.error 'Unknown module: ', toInstall
            return done()

      ], (err) ->
        console.error err if err?

