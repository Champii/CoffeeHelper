#!/usr/bin/env lsc

#
# Nodulator Boostrap
#
# Usage: Nodulator (init | (console | c)) | ((install | remove) moduleName)
#

require! {
  fs
  path
  async
  commander: opts
  underscore: _
  child_process: {exec}
}

opts
  .version \1.5.0
  .usage '[options]'
  .option '-p, --port <n>'        'Specify the port. Override the configuration.'
  .option '-s, --settings [path]' 'The path where to find the \'config.ls\''
  .option '-c, --console'         'Run the Console.'
  .option '-i, --init'            'Create a base folder structure based on which modules you have in your config.'
  .parse process.argv

NodulatorRoot = path.resolve fs.realpathSync(path.resolve __dirname, __filename), '../..'
appRoot = path.resolve '.'

moduleOrder = ['nodulator-socket', 'nodulator-assets', 'nodulator-angular', 'nodulator-account']

capitalize = (str) ->
  str[0].toUpperCase() + str[1 to]*''

exists = (path, done) ->
  fs.realpath path, (err, realPath) ->
    return done false if err?

    fs.lstat realPath, (err, stat) ->
      return done false if err?

      if stat.isDirectory! or stat.isSymbolicLink! or stat.isFile()
        done true
      else
        done false

config = {}
try
  config = require path.resolve appRoot, opts.config || \./config.ls
catch e
  console.log "No config, taking default one." e

config = config || {}
config <<< port: opts.port if opts.port?

global.N = require NodulatorRoot

#launch project
if not opts.console? and not opts.init?

  N.Config config
  require path.resolve appRoot
  N.PostConfig!
  console.log "Listening to :#{N.config.port}..."

if opts.console?

  cons = require __dirname + \/Console
  cons (opts.config || \./config.ls), \./

if opts.init?
  console.log "Temporary disabled"
  return

  async.series [
    (done) ->
      process.stdout.write 'Installing base folder tree.......'
      exec 'mkdir -p node_modules', (err, stdout, stderr) ->
        exec 'cp -r ' + (path.resolve NodulatorRoot, 'bin/baseFiles/') + '/* ' + appRoot, ->
          done()

    (done) ->
      process.stdout.write 'Ok\n'
      process.stdout.write 'Processing submodules.............'
      fs.readdir 'node_modules', (err, files) ->
        return done err if err?

        nodulatorFiles = _(files).filter (name) -> name.split('-').length > 1 and name.split('-')[0] is 'nodulator'
        toWrite = if not nodulatorFiles.length then 'None\n' else nodulatorFiles.length
        process.stdout.write toWrite + '\n'

        i = 1
        async.eachSeries (_(nodulatorFiles).sortBy (item) -> _(moduleOrder).indexOf item), (file, done) ->
          binName = 'Nodulator-' + file.split('-')[1][0].toUpperCase() + file.split('-')[1][1 to]*'' + '.coffee'
          binPath = appRoot + '/node_modules/' + file + '/bin/' + binName
          test = binPath
          exists binPath, (exist) ->
            if not exist
              binName = 'Nodulator-' + file.split('-')[1][0].toUpperCase() + file.split('-')[1][1 to]*'' + '.ls'
              binPath = appRoot + '/node_modules/' + file + '/bin/' + binName
              return exists binPath, (exist) ->
                return done() if not exist

                process.stdout.write '\n[' + i++ + ']Processing ' + binName.split('.')[0] + ': \n'
                (require binPath)(done)

            binName = 'Nodulator-' + file.split('-')[1][0].toUpperCase() + file.split('-')[1][1 to]*'' + '.coffee'
            binPath = appRoot + '/node_modules/' + file + '/bin/' + binName
            process.stdout.write '\n[' + i++ + ']Processing ' + binName.split('.')[0] + ': \n'
            (require binPath)(done)
        , done

  ], (err, results) ->
    return console.error err if err?
